[{"path":"https://jvparidon.github.io/lmerMultiMember/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 lmerMultiMember authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/articles/group_membership.html","id":"general-idea","dir":"Articles","previous_headings":"","what":"General idea","title":"Group membership models using lmerMultiMember","text":"Consider situation multiple items sort associated effects, can’t association observations single items; instead, observation associated group items. (Two examples come (1) authorship papers (2) hockey players team.) quite identical “multi-membership models” (part group membership binary, .e., weighted), although similar techniques shown work multi-membership models.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/articles/group_membership.html","id":"simple-example","dir":"Articles","previous_headings":"","what":"Simple example","title":"Group membership models using lmerMultiMember","text":"Load packages (don’t really need anything beyond lmerMultiMember; rest convenience/drawing pictures). Construct simulated example: first, simulate design (structure).  can look many times particular number groups occurs (match \\(Binomial(n=20, 0, p=0.25)\\))  Since chose items/individuals include observation randomly independently (Bernoulli probability 0.25), highly variable number individuals present different observations (1-11). realistic examples (authorship), unrealistic others (hockey) … don’t think really makes much difference computationally (statistically, observations single member must make estimation powerful …) 0/1 matrix (indicator variable whether item \\(\\) included observation \\(j\\)) convenient, turn form need inclusion model. fairly straightforward convert forms (e.g. list sets items associated observation) form … Now simulate response variable. Fit results look OK (correct item residual variance estimated): conditional modes item look good:","code":"library(lmerMultiMember) library(broom.mixed) library(ggplot2) theme_set(theme_bw()) library(Matrix) nm <- 20 # number of groups nobs <- 1000 set.seed(101) ## choose items for observations pres <- matrix(rbinom(nobs * nm, prob = 0.25, size = 1), nrow = nobs, ncol = nm) dimnames(pres) <- list(NULL, LETTERS[seq(nm)]) pres[1:5, ] ##      A B C D E F G H I J K L M N O P Q R S T ## [1,] 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 0 ## [2,] 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 ## [3,] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 ## [4,] 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 0 ## [5,] 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 image(Matrix(pres),   ylim = c(1, 10), sub = \"\", ylab = \"Observation\",   xlab = \"Item\",   ## draw tick labels at top   scales = list(at = 1:20, x = list(     labels = colnames(pres),     alternating = 2   )) ) hist(rowSums(pres),   main = \"Multi-Group Membership\",   xlab = \"Number of groups associated with an observation\" ) b <- rnorm(nm, sd = 2) ## item-level effects ## n.b. get in trouble if we don't add residual error ## (theta is scaled relative to residual error) y <- c(pres %*% b) + rnorm(nobs, sd = 1.5) m1 <- lmer(y ~ 1 + (1 | membership),   data = data.frame(y = y, x = rep(1, nobs)),   memberships = list(membership = t(pres)) ) summary(m1) ## Linear mixed model fit by REML. Model includes multiple membership random ##   effects. [lmerModMultiMember] ## Formula: y ~ 1 + (1 | membership) ##    Data: data.frame(y = y, x = rep(1, nobs)) ##  ## REML criterion at convergence: 3649.6 ##  ## Scaled residuals:  ##     Min      1Q  Median      3Q     Max  ## -3.1676 -0.6347 -0.0237  0.6569  3.3445  ##  ## Random effects: ##  Groups     Name        Variance Std.Dev. ##  membership (Intercept) 3.840    1.960    ##  Residual               1.995    1.412    ## Number of obs: 1000, groups:  membership, 20 ##  ## Fixed effects: ##             Estimate Std. Error t value ## (Intercept)   0.1618     0.1320   1.226 ##  ## Group memberships per observation for multiple membership REs: ##            Min. per obs. Mean per obs. Max. per obs. ## membership 0             5.067         14 dd <- tidy(m1, effects = \"ran_vals\") dd <- transform(dd, level = reorder(level, estimate)) truth <- data.frame(level = LETTERS[seq(nm)], estimate = b) ggplot(dd, aes(x = level, y = estimate)) +   geom_pointrange(aes(     ymin = estimate - 2 * std.error,     ymax = estimate + 2 * std.error   )) +   coord_flip() +   geom_point(data = truth, colour = \"red\")"},{"path":"https://jvparidon.github.io/lmerMultiMember/articles/group_membership.html","id":"zooming-in-equal-indepent-contributions","dir":"Articles","previous_headings":"","what":"Zooming In: Equal, indepent contributions","title":"Group membership models using lmerMultiMember","text":", look model observation associated precisely two groups get better feel.  ideal, horrible – looks like upward bias, inline estimate group standard deviation bit .","code":"set.seed(42) nobs <- 1000 nm <- 10 dat <- data.frame(   x = runif(nobs),   z = runif(nobs),   # TODO: double check that all(g1 != g2)   g1 = sample(1:nm, nobs, TRUE),   g2 = sample(1:nm, nobs, TRUE) )  dat$grps <- paste(LETTERS[dat$g1], LETTERS[dat$g2], sep = \",\")  # fixed effects beta <- c(1, 2, 3) # random effects bint <- rnorm(nm, sd = 3.14) # we could be clever about setting the model matrix here, but it's # easier and clearer how we're constructing bits if we're inefficient  fe <- beta[1] + beta[2] * dat$x + beta[3] * dat$z  # note that the group contributions for each observation are assumed to be # independent and equally weighted. # TODO: add example of unequal weights re <- bint[dat$g1] + bint[dat$g2]  dat$y <- fe + re + rnorm(nobs, sd = 1) weights <- weights_from_vector(dat$grps) head(dat) ##           x          z g1 g2 grps         y ## 1 0.9148060 0.84829322  2  9  B,I  7.132846 ## 2 0.9370754 0.06274633  4 10  D,J -1.199958 ## 3 0.2861395 0.81984509  7  4  G,D  1.939330 ## 4 0.8304476 0.53936029  3  7  C,G  3.706502 ## 5 0.6417455 0.49902010 10 10  J,J -1.075549 ## 6 0.5190959 0.02222732 10  9  J,I  1.807260 image(t(weights),   ylim = c(1, 10), sub = \"\", ylab = \"Observation\",   xlab = \"Item\",   ## draw tick labels at top   scales = list(at = 1:20, x = list(     labels = colnames(pres),     alternating = 2   )) ) m2 <- lmer(y ~ 1 + x + z + (1 | g),   data = dat,   memberships = list(g = weights), REML = FALSE ) summary(m2) ## Linear mixed model fit by maximum likelihood . Model includes multiple ##   membership random effects. [lmerModMultiMember] ## Formula: y ~ 1 + x + z + (1 | g) ##    Data: dat ##  ##      AIC      BIC   logLik deviance df.resid  ##   3759.7   3784.3  -1874.9   3749.7      995  ##  ## Scaled residuals:  ##     Min      1Q  Median      3Q     Max  ## -5.9726 -0.4984 -0.0005  0.5191  4.7098  ##  ## Random effects: ##  Groups   Name        Variance Std.Dev. ##  g        (Intercept) 14.48    3.805    ##  Residual              2.32    1.523    ## Number of obs: 1000, groups:  g, 10 ##  ## Fixed effects: ##             Estimate Std. Error t value ## (Intercept)  -1.7744     0.3147  -5.639 ## x             1.9434     0.1666  11.667 ## z             2.7957     0.1636  17.088 ##  ## Correlation of Fixed Effects: ##   (Intr) x      ## x -0.303        ## z -0.266  0.000 ##  ## Group memberships per observation for multiple membership REs: ##   Min. per obs. Mean per obs. Max. per obs. ## g 1             1.886         2 dd <- tidy(m2, effects = \"ran_vals\") dd <- transform(dd, level = reorder(level, estimate)) truth <- data.frame(level = LETTERS[seq(nm)], estimate = bint) ggplot(dd, aes(x = level, y = estimate)) +   geom_pointrange(aes(     ymin = estimate - 2 * std.error,     ymax = estimate + 2 * std.error   )) +   coord_flip() +   geom_point(data = truth, colour = \"red\")"},{"path":"https://jvparidon.github.io/lmerMultiMember/articles/group_membership.html","id":"a-slightly-more-complex-example","dir":"Articles","previous_headings":"","what":"A slightly more complex example","title":"Group membership models using lmerMultiMember","text":"build last example adding random slope.","code":"set.seed(42) nobs <- 10000 nm <- 26 dat <- data.frame(   x = runif(nobs),   z = runif(nobs),   # TODO: double check that all(g1 != g2)   g1 = sample(1:nm, nobs, TRUE),   g2 = sample(1:nm, nobs, TRUE) )  dat$grps <- paste(LETTERS[dat$g1], LETTERS[dat$g2], sep = \",\")  # fixed effects beta <- c(1, 2, 3) # random effects bint <- rnorm(nm, sd = 3.14) bx <- rnorm(nm, sd = 0.2)  # we could be clever about setting the model matrix here, but it's # easier and clearer how we're constructing bits if we're inefficient  fe <- beta[1] + beta[2] * dat$x + beta[3] * dat$z  # note that the group contributions for each observation are assumed to be # independent and equally weighted. # TODO: add example of unequal weights re <- bint[dat$g1] + bint[dat$g2] + (bx[dat$g1] + bx[dat$g2]) * dat$x  dat$y <- fe + re + rnorm(nobs, sd = 1) head(dat) ##           x         z g1 g2 grps         y ## 1 0.9148060 0.5283896 11 13  K,M 9.7194660 ## 2 0.9370754 0.6463879 24 12  X,L 4.9175119 ## 3 0.2861395 0.8340490 17  2  Q,B 0.3754283 ## 4 0.8304476 0.3457626 22 19  V,S 8.4488474 ## 5 0.6417455 0.6217329 25 20  Y,T 5.8487113 ## 6 0.5190959 0.6631953 23 10  W,J 9.5083034 image(t(weights_from_vector(dat$grps)),   ylim = c(1, 10), sub = \"\", ylab = \"Observation\",   xlab = \"Item\",   ## draw tick labels at top   scales = list(at = 1:20, x = list(     labels = colnames(pres),     alternating = 2   )) ) m3 <- lmer(y ~ 1 + x + z + (1 + x | g),   data = dat, REML = FALSE,   memberships = list(g = weights_from_vector(dat$grps)) ) summary(m3) ## Linear mixed model fit by maximum likelihood . Model includes multiple ##   membership random effects. [lmerModMultiMember] ## Formula: y ~ 1 + x + z + (1 + x | g) ##    Data: dat ##  ##      AIC      BIC   logLik deviance df.resid  ##  31702.8  31753.3 -15844.4  31688.8     9993  ##  ## Scaled residuals:  ##     Min      1Q  Median      3Q     Max  ## -5.8374 -0.5944  0.0028  0.5888  7.3928  ##  ## Random effects: ##  Groups   Name        Variance Std.Dev. Corr  ##  g        (Intercept) 10.33148 3.2143         ##           x            0.03115 0.1765   -0.07 ##  Residual              1.35828 1.1655         ## Number of obs: 10000, groups:  g, 26 ##  ## Fixed effects: ##             Estimate Std. Error t value ## (Intercept)  2.90901    0.13064   22.27 ## x            2.09441    0.07809   26.82 ## z            2.99998    0.04034   74.37 ##  ## Correlation of Fixed Effects: ##   (Intr) x      ## x -0.303        ## z -0.168  0.003 ##  ## Group memberships per observation for multiple membership REs: ##   Min. per obs. Mean per obs. Max. per obs. ## g 1             1.9638        2 dd <- tidy(m3, effects = \"ran_vals\") dd <- transform(dd, level = reorder(level, estimate)) truth <- rbind(   data.frame(level = LETTERS[seq(nm)], estimate = bint, term = \"(Intercept)\"),   data.frame(level = LETTERS[seq(nm)], estimate = bx, term = \"x\") ) ggplot(dd, aes(x = level, y = estimate)) +   geom_pointrange(aes(     ymin = estimate - 2 * std.error,     ymax = estimate + 2 * std.error   )) +   coord_flip() +   geom_point(data = truth, colour = \"red\") +   facet_wrap(~term) # note that we have a random slope for which we didn't introduce any variation # in the data, which is the same as setting it to zero m4 <- lmer(y ~ 1 + x + z + (1 + x + z | g),   data = dat, REML = FALSE,   memberships = list(g = weights_from_vector(dat$grps)) ) summary(m4) ## Linear mixed model fit by maximum likelihood . Model includes multiple ##   membership random effects. [lmerModMultiMember] ## Formula: y ~ 1 + x + z + (1 + x + z | g) ##    Data: dat ##  ##      AIC      BIC   logLik deviance df.resid  ##  31708.6  31780.7 -15844.3  31688.6     9990  ##  ## Scaled residuals:  ##     Min      1Q  Median      3Q     Max  ## -5.8370 -0.5937  0.0025  0.5892  7.3900  ##  ## Random effects: ##  Groups   Name        Variance  Std.Dev. Corr        ##  g        (Intercept) 1.031e+01 3.21108              ##           x           3.128e-02 0.17685  -0.07       ##           z           1.928e-04 0.01389   0.43  0.87 ##  Residual             1.358e+00 1.16543              ## Number of obs: 10000, groups:  g, 26 ##  ## Fixed effects: ##             Estimate Std. Error t value ## (Intercept)  2.91077    0.13119   22.19 ## x            2.09222    0.07821   26.75 ## z            2.99999    0.04062   73.86 ##  ## Correlation of Fixed Effects: ##   (Intr) x      ## x -0.318        ## z -0.192  0.102 ##  ## Group memberships per observation for multiple membership REs: ##   Min. per obs. Mean per obs. Max. per obs. ## g 1             1.9638        2 # note that we have a random slope for which we didn't introduce any variation # in the data, which is the same as setting it to zero m4zc <- lmer(y ~ 1 + x + z + (1 + x + z || g),   data = dat, REML = FALSE,   memberships = list(g = weights_from_vector(dat$grps)) ) summary(m4zc) ## Linear mixed model fit by maximum likelihood . Model includes multiple ##   membership random effects. [lmerModMultiMember] ## Formula: y ~ 1 + x + z + (1 + x + z || g) ##    Data: dat ##  ##      AIC      BIC   logLik deviance df.resid  ##  31702.9  31753.4 -15844.4  31688.9     9993  ##  ## Scaled residuals:  ##     Min      1Q  Median      3Q     Max  ## -5.8387 -0.5935  0.0035  0.5888  7.3888  ##  ## Random effects: ##  Groups   Name        Variance Std.Dev. ##  g        (Intercept) 10.3159  3.2118   ##  g.1      x            0.0311  0.1763   ##  g.2      z            0.0000  0.0000   ##  Residual              1.3583  1.1655   ## Number of obs: 10000, groups:  g, 26 ##  ## Fixed effects: ##             Estimate Std. Error t value ## (Intercept)  2.90949    0.13044   22.31 ## x            2.09370    0.07806   26.82 ## z            2.99992    0.04034   74.37 ##  ## Correlation of Fixed Effects: ##   (Intr) x      ## x -0.298        ## z -0.168  0.003 ##  ## Group memberships per observation for multiple membership REs: ##   Min. per obs. Mean per obs. Max. per obs. ## g 1             1.9638        2"},{"path":"https://jvparidon.github.io/lmerMultiMember/articles/group_membership.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info:","title":"Group membership models using lmerMultiMember","text":"","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] Matrix_1.4-1           ggplot2_3.3.6          broom.mixed_0.2.9.4    ## [4] lmerMultiMember_0.10.1 ##  ## loaded via a namespace (and not attached): ##  [1] Rcpp_1.0.9        lattice_0.20-45   tidyr_1.2.1       listenv_0.8.0     ##  [5] rprojroot_2.0.3   digest_0.6.30     utf8_1.2.2        parallelly_1.32.1 ##  [9] R6_2.5.1          backports_1.4.1   evaluate_0.17     highr_0.9         ## [13] pillar_1.8.1      rlang_1.0.6       minqa_1.2.4       furrr_0.3.1       ## [17] nloptr_2.0.3      jquerylib_0.1.4   rmarkdown_2.17    pkgdown_2.0.6     ## [21] labeling_0.4.2    textshaping_0.3.6 desc_1.4.2        splines_4.2.1     ## [25] lme4_1.1-30       stringr_1.4.1     munsell_0.5.0     broom_1.0.1       ## [29] compiler_4.2.1    xfun_0.34         pkgconfig_2.0.3   systemfonts_1.0.4 ## [33] globals_0.16.1    htmltools_0.5.3   tidyselect_1.2.0  tibble_3.1.8      ## [37] codetools_0.2-18  fansi_1.0.3       future_1.28.0     dplyr_1.0.10      ## [41] withr_2.5.0       MASS_7.3-57       grid_4.2.1        nlme_3.1-157      ## [45] jsonlite_1.8.2    gtable_0.3.1      lifecycle_1.0.3   magrittr_2.0.3    ## [49] scales_1.2.1      cli_3.4.1         stringi_1.7.8     cachem_1.0.6      ## [53] farver_2.1.1      fs_1.5.2          bslib_0.4.0       ragg_1.2.3        ## [57] generics_0.1.3    vctrs_0.4.2       boot_1.3-28       tools_4.2.1       ## [61] forcats_0.5.2     glue_1.6.2        purrr_0.3.5       parallel_4.2.1    ## [65] fastmap_1.1.0     yaml_2.3.6        colorspace_2.0-3  memoise_2.0.1     ## [69] knitr_1.40        sass_0.4.2"},{"path":"https://jvparidon.github.io/lmerMultiMember/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"JP van Paridon. Author, maintainer. Ben Bolker. Author. Phillip Alday. Author.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van Paridon J, Bolker B, Alday P (2022). lmerMultiMember: Multiple membership random effects. R package version 0.10.1, https://jvparidon.github.io/lmerMultiMember/.","code":"@Manual{,   title = {lmerMultiMember: Multiple membership random effects},   author = {JP {van Paridon} and Ben Bolker and Phillip Alday},   year = {2022},   note = {R package version 0.10.1},   url = {https://jvparidon.github.io/lmerMultiMember/}, }"},{"path":"https://jvparidon.github.io/lmerMultiMember/index.html","id":"lmermultimember-","dir":"","previous_headings":"","what":"Multiple membership random effects","title":"Multiple membership random effects","text":"Wrapper around lme4::lmer lme4::glmer add support multiple membership random effects.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multiple membership random effects","text":"package yet available CRAN, can install devtools package:","code":"if(!require(devtools)){     install.packages(\"devtools\")     library(\"devtools\") }  install_github(\"jvparidon/lmerMultiMember\")"},{"path":"https://jvparidon.github.io/lmerMultiMember/index.html","id":"what-is-a-multimembership-random-effect","dir":"","previous_headings":"","what":"What is a multimembership random effect?","title":"Multiple membership random effects","text":"Let’s take authorship example: want model aspect published journal articles, e.g. citations ~ word_count, might want account variability caused authors papers using random intercepts. However, many papers don’t just single author. account author variability ? One method model unique grouping authors separate level random effect (.e. “John ”, “Mary B”, “John & Mary B”, “Mary B & John ” four different levels random effect) downside correctly attributing variance individual authors groups. Another option separate random effects position author list (.e. (1|author1) + (1|author2) + (1|author3) etc.) treat author separate entity, treats author different people depending occur author list, also little strange. natural option associate observation (journal article) multiple levels (authors) single random effect. multimembership random effect.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/index.html","id":"how-to-specify-a-multimembership-random-effect","dir":"","previous_headings":"","what":"How to specify a multimembership random effect","title":"Multiple membership random effects","text":"Specifying multimembership model lmerMultiMember works just like specifying mixed effects model lme4, addition membership matrix (weight matrix). sparse matrix contains rows observations dataset columns unique group member. observation, matrix contains 1s group members associated , 0s everywhere else. (group members equal association strength, 1s membership matrix can, principle, replaces fractions represent relative contributions, etc.) model syntax e.g. lmerMultiMember::lmer(citations ~ word_count + (1|author), memberships=list(author=membership_matrix)). Creating membership matrix might seem little daunting, provide helper function lmerMultiMember::weights_from_vector creates membership matrix vector group memberships comma-separated strings (e.g. c(\",B\", \",B,C\", \"B\", \"C,\")) group memberships documented dataset easy enough create membership matrix model.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/index.html","id":"nested-random-effects-groupings-work-a-little-differently","dir":"","previous_headings":"","what":"Nested random effects groupings work a little differently","title":"Multiple membership random effects","text":"lmerMultiMember uses dummy variables fake factors internally ‘trick’ lme4 accepting multiple membership random effects. Unfortunately, system dummies fakes means can’t specify nested multimembership random effects grouping using normal formula syntax. example, lmer(citations ~ word_count + (1 | author/journal), memberships = list(author = membership_matrix)) throw error, multiple membership author variable nested inside journal grouping. solution issue pre-generate indicator/weight matrix nested grouping using provided lmerMultiMember::interaction_weights() function. example, given dataframe df multimembership author single membership journal grouping variables, order get nested groupings, following:","code":"Wa <- weights_from_vectors(df$author) Wj <- Matrix::fac2sparse(df$journal)  # convert single membership vars to an indicator matrix with fac2sparse() Waj <- interaction_weights(Wa, Wj) lmer(citations ~ word_count + (1 | author) + (1 | authorXjournal), memberships = list(author = Wa, authorXjournal = Waj))"},{"path":"https://jvparidon.github.io/lmerMultiMember/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Multiple membership random effects","text":"issues fitting models lmerMultiMember, feel free contact Jeroen van Paridon vanparidon@wisc.edu.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/glmer.html","id":null,"dir":"Reference","previous_headings":"","what":"multimembership generalized linear mixed effects models — glmer","title":"multimembership generalized linear mixed effects models — glmer","text":"lme4::glmer multimembership random effects","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/glmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multimembership generalized linear mixed effects models — glmer","text":"","code":"glmer(   formula,   data = NULL,   family,   control = lme4::glmerControl(),   start = NULL,   verbose = 0L,   nAGQ = 1L,   weights = NULL,   na.action = na.omit,   offset = NULL,   contrasts = NULL,   devFunOnly = FALSE,   memberships = NULL )"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/glmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multimembership generalized linear mixed effects models — glmer","text":"formula two-sided linear formula object describing     fixed-effects random-effects part model, response     left ~ operator terms, separated     + operators, right.  Random-effects terms     distinguished vertical bars (\"|\") separating expressions     design matrices grouping factors. data optional data frame containing variables named     formula.  default variables taken     environment lmer called.  data     optional, package authors strongly recommend use,     especially later applying methods update     drop1 fitted model (methods     guaranteed work properly data omitted).      data omitted, variables taken environment     formula (specified formula) parent     frame (specified character vector). family GLM family, see glm     family. control list (correct class, resulting     lmerControl() glmerControl()     respectively) containing control parameters, including nonlinear     optimizer used parameters passed     nonlinear optimizer, see *lmerControl documentation     details. start named list starting values parameters     model, numeric vector.  numeric start argument     used starting value theta.  start     list, theta element (numeric vector) used     starting value first optimization step (default=1     diagonal elements 0 -diagonal elements lower     Cholesky factor); fitted value theta first     step, plus start[[\"fixef\"]], used starting values     second optimization step.  start fixef     theta elements, first optimization step skipped.     details finer control optimization, see     modular. verbose integer scalar.  > 0 verbose output     generated optimization parameter estimates.      > 1 verbose output generated individual     penalized iteratively reweighted least squares (PIRLS) steps. nAGQ integer scalar - number points per axis     evaluating adaptive Gauss-Hermite approximation     log-likelihood.  Defaults 1, corresponding Laplace     approximation.  Values greater 1 produce greater accuracy     evaluation log-likelihood expense speed.      value zero uses faster less exact form parameter     estimation GLMMs optimizing random effects     fixed-effects coefficients penalized iteratively reweighted     least squares step. (See Details.) weights optional vector ‘prior weights’ used       fitting process.  NULL numeric       vector. na.action function indicates happen     data contain NAs.  default action (na.omit,     inherited ‘factory fresh’ value     getOption(\"na.action\")) strips observations     missing values variables. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See model.offset. contrasts optional list.  See contrasts.arg     model.matrix.default. devFunOnly logical - return deviance evaluation     function. Note deviance function operates     variables stored environment, may return     exactly values subsequent calls (results     always within machine tolerance). memberships named list weight matrices replace (dummy) random effects matching names","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/glmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multimembership generalized linear mixed effects models — glmer","text":"lme4 model object","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/glmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multimembership generalized linear mixed effects models — glmer","text":"","code":"df <- data.frame(   x = runif(60, 0, 1),   y = rbinom(60, 1, 0.6),   memberships = rep(c(\"a,b,c\", \"a,c\", \"a\", \"b\", \"b,a\", \"b,c,a\"), 10) ) weights <- weights_from_vector(df$memberships)  # note that the grouping variable name is arbitrary -- it just has # to match the name in the list and doesn't need to correspond to a column # name in the data glmer(y ~ x + (1 | members),   data = df,   family = binomial,   memberships = list(members = weights) ) #> Generalized linear mixed model fit by maximum likelihood (Laplace #>   Approximation) [glmerModMultiMember] #>  Family: binomial  ( logit ) #> Formula: y ~ x + (1 | members) #>    Data: df #>      AIC      BIC   logLik deviance df.resid  #>  84.9926  91.2757 -39.4963  78.9926       57  #> Random effects: #>  Groups  Name        Std.Dev. #>  members (Intercept) 0        #> Number of obs: 60, groups:  members, 3 #> Fixed Effects: #> (Intercept)            x   #>       1.055       -1.277"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/glmerModMultiMember-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Model object for multimembership generalized linear mixed models — glmerModMultiMember-class","title":"Model object for multimembership generalized linear mixed models — glmerModMultiMember-class","text":"glmerModMultiMember class extends glmerMod lme4-package merModMultiMember.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/glmerModMultiMember-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model object for multimembership generalized linear mixed models — glmerModMultiMember-class","text":"object class glmerModMultiMember similar merModMultiMember objects inheriting glmerMod","code":""},{"path":[]},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/interaction_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight matrix from the interaction of two other weight matrices — interaction_weights","title":"Weight matrix from the interaction of two other weight matrices — interaction_weights","text":"Provides helper function pre-generating interactions. Takes sparse weight/indicator matrices generated e.g. Matrix::fac2sparse() weights_from_vector() input.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/interaction_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight matrix from the interaction of two other weight matrices — interaction_weights","text":"","code":"interaction_weights(a, b)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/interaction_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight matrix from the interaction of two other weight matrices — interaction_weights","text":"sparse weight/indicator matrix class Matrix::dgCmatrix b sparse weight/indicator matrix class Matrix::dgCmatrix","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/interaction_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight matrix from the interaction of two other weight matrices — interaction_weights","text":"sparse interaction weight/indicator matrix class Matrix::dgCmatrix","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/interaction_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight matrix from the interaction of two other weight matrices — interaction_weights","text":"","code":"a <- rep(c(\"k\", \"l\", \"l,k\"), 2) b <- rep(c(\"m\", \"n\"), 3) Wa <- weights_from_vector(a) Wb <- Matrix::fac2sparse(b) Wab <- interaction_weights(Wa, Wb)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmer.html","id":null,"dir":"Reference","previous_headings":"","what":"multimembership linear mixed effects models — lmer","title":"multimembership linear mixed effects models — lmer","text":"lme4::lmer multimembership random effects","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multimembership linear mixed effects models — lmer","text":"","code":"lmer(   formula,   data = NULL,   REML = TRUE,   control = lme4::lmerControl(),   start = NULL,   verbose = 0L,   weights = NULL,   na.action = na.omit,   offset = NULL,   contrasts = NULL,   devFunOnly = FALSE,   memberships = NULL )"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multimembership linear mixed effects models — lmer","text":"formula two-sided linear formula object describing     fixed-effects random-effects part model,     response left ~ operator terms, separated     + operators, right.  Random-effects terms     distinguished vertical bars (|) separating expressions     design matrices grouping factors.  Two vertical bars     (||) can used specify multiple uncorrelated random     effects grouping variable.      (way implemented, ||-syntax works        design matrices containing numeric (continuous) predictors;      fit models independent categorical effects, see dummy      lmer_alt function afex package.) data optional data frame containing variables named     formula.  default variables taken     environment lmer called. data     optional, package authors strongly recommend use,     especially later applying methods update     drop1 fitted model (methods     guaranteed work properly data omitted).     data omitted, variables taken environment     formula (specified formula) parent     frame (specified character vector). REML logical scalar - estimates chosen     optimize REML criterion (opposed log-likelihood)? control list (correct class, resulting     lmerControl() glmerControl()     respectively) containing control parameters, including nonlinear     optimizer used parameters passed     nonlinear optimizer, see *lmerControl documentation     details. start named list starting values     parameters model.  lmer can numeric     vector list one component named \"theta\". verbose integer scalar.  > 0 verbose output     generated optimization parameter estimates.      > 1 verbose output generated individual     penalized iteratively reweighted least squares (PIRLS) steps. weights optional vector ‘prior weights’ used     fitting process.  NULL numeric vector.     Prior weights normalized standardized     way.  particular, diagonal residual covariance     matrix squared residual standard deviation parameter     sigma times vector inverse weights.     Therefore, weights relatively large magnitudes,     order compensate, sigma parameter     also need relatively large magnitude. na.action function indicates happen     data contain NAs.  default action (na.omit,     inherited 'factory fresh' value     getOption(\"na.action\")) strips observations     missing values variables. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See     model.offset. contrasts optional list. See contrasts.arg     model.matrix.default. devFunOnly logical - return deviance evaluation     function. Note deviance function operates     variables stored environment, may return     exactly values subsequent calls (results     always within machine tolerance). memberships named list weight matrices replace (dummy) random effects matching names","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multimembership linear mixed effects models — lmer","text":"lme4 model object","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multimembership linear mixed effects models — lmer","text":"","code":"df <- data.frame(   x = seq(60) + runif(60, 0, 10),   y = seq(60) + rep(runif(6, 0, 10), 10),   memberships = rep(c(\"a,b,c\", \"a,c\", \"a\", \"b\", \"b,a\", \"b,c,a\"), 10) ) weights <- weights_from_vector(df$memberships)  # note that the grouping variable name is arbitrary -- it just has # to match the name in the list and doesn't need to correspond to a column # name in the data lmer(y ~ x + (1 | members),   data = df,   memberships = list(members = weights) ) #> Linear mixed model fit by REML ['lmerModMultiMember'] #> Formula: y ~ x + (1 | members) #>    Data: df #> REML criterion at convergence: 319.0706 #> Random effects: #>  Groups   Name        Std.Dev. #>  members  (Intercept) 1.587    #>  Residual             3.249    #> Number of obs: 60, groups:  members, 3 #> Fixed Effects: #> (Intercept)            x   #>      3.5372       0.9744"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmerModLmerTestMultiMember-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Model object for multimembership linear mixed models with lmerTest — lmerModLmerTestMultiMember-class","title":"Model object for multimembership linear mixed models with lmerTest — lmerModLmerTestMultiMember-class","text":"lmerModMultiMember class extends lmerModLmerTest lmerTest-package lmerModMultiMember.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmerModLmerTestMultiMember-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model object for multimembership linear mixed models with lmerTest — lmerModLmerTestMultiMember-class","text":"object class lmerModMultiMember similar merModMultiMember objects inheriting lmerMod","code":""},{"path":[]},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmerModMultiMember-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Model object for multimembership linear mixed models — lmerModMultiMember-class","title":"Model object for multimembership linear mixed models — lmerModMultiMember-class","text":"lmerModMultiMember class extends lmerMod lme4-package merModMultiMember.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/lmerModMultiMember-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model object for multimembership linear mixed models — lmerModMultiMember-class","text":"object class lmerModMultiMember similar merModMultiMember objects inheriting lmerMod","code":""},{"path":[]},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/merModMultiMember-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Model object for multimembership linear mixed models — merModMultiMember-class","title":"Model object for multimembership linear mixed models — merModMultiMember-class","text":"merModMultiMember class extends merMod lme4-package.","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/merModMultiMember-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model object for multimembership linear mixed models — merModMultiMember-class","text":"object class merModMultiMember similar merMod objects (see merMod) extra information multimembership random effects.","code":""},{"path":[]},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.dgCMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for multiple membership weights histogram — plot_membership_hist.dgCMatrix","title":"Plotting function for multiple membership weights histogram — plot_membership_hist.dgCMatrix","text":"Plotting function multiple membership weights histogram","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.dgCMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for multiple membership weights histogram — plot_membership_hist.dgCMatrix","text":"","code":"# S3 method for dgCMatrix plot_membership_hist(x, varname = NULL, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.dgCMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for multiple membership weights histogram — plot_membership_hist.dgCMatrix","text":"x multimembership weight matrix varname name multimembership variable, used title ... additional arguments pass graphics::hist","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for multiple dispatch of multiple membership weights\nhistogram functions — plot_membership_hist","title":"Generic for multiple dispatch of multiple membership weights\nhistogram functions — plot_membership_hist","text":"Generic multiple dispatch multiple membership weights histogram functions","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for multiple dispatch of multiple membership weights\nhistogram functions — plot_membership_hist","text":"","code":"plot_membership_hist(x, varname = NULL, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for multiple dispatch of multiple membership weights\nhistogram functions — plot_membership_hist","text":"x object containing multimembership information, either weight matrix, multimembership model, model summary varname multimembership variable plot, object contains one ... additional arguments pass graphics::hist","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.merModMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting method for multiple memberships model weights histogram — plot_membership_hist.merModMultiMember","title":"Plotting method for multiple memberships model weights histogram — plot_membership_hist.merModMultiMember","text":"Plotting method multiple memberships model weights histogram","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.merModMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting method for multiple memberships model weights histogram — plot_membership_hist.merModMultiMember","text":"","code":"# S3 method for merModMultiMember plot_membership_hist(x, varname, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.merModMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting method for multiple memberships model weights histogram — plot_membership_hist.merModMultiMember","text":"x merModMultiMember object varname multimembership variable plotted ... additional arguments pass graphics::hist","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.summary.merModMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting method for multiple memberships model summary weights\nhistogram — plot_membership_hist.summary.merModMultiMember","title":"Plotting method for multiple memberships model summary weights\nhistogram — plot_membership_hist.summary.merModMultiMember","text":"Plotting method multiple memberships model summary weights histogram","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.summary.merModMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting method for multiple memberships model summary weights\nhistogram — plot_membership_hist.summary.merModMultiMember","text":"","code":"# S3 method for summary.merModMultiMember plot_membership_hist(x, varname, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_hist.summary.merModMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting method for multiple memberships model summary weights\nhistogram — plot_membership_hist.summary.merModMultiMember","text":"x merModMultiMember summary object varname multimembership variable plotted ... additional arguments pass graphics::hist","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for multiple membership matrix — plot_membership_matrix.default","title":"Plotting function for multiple membership matrix — plot_membership_matrix.default","text":"Plotting function multiple membership matrix","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for multiple membership matrix — plot_membership_matrix.default","text":"","code":"# S3 method for default plot_membership_matrix(x, varname = NULL, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for multiple membership matrix — plot_membership_matrix.default","text":"x multimembership weight matrix varname name multimembership variable, used title ... additional arguments pass Matrix::image","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for multiple dispatch of multiple membership plot functions — plot_membership_matrix","title":"Generic for multiple dispatch of multiple membership plot functions — plot_membership_matrix","text":"Generic multiple dispatch multiple membership plot functions","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for multiple dispatch of multiple membership plot functions — plot_membership_matrix","text":"","code":"plot_membership_matrix(x, varname = NULL, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for multiple dispatch of multiple membership plot functions — plot_membership_matrix","text":"x object containing multimembership information, either weight matrix, multimembership model, model summary varname multimembership variable plot, object contains one ... additional arguments pass Matrix::image","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.merModMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting method for multiple memberships model — plot_membership_matrix.merModMultiMember","title":"Plotting method for multiple memberships model — plot_membership_matrix.merModMultiMember","text":"Plotting method multiple memberships model","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.merModMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting method for multiple memberships model — plot_membership_matrix.merModMultiMember","text":"","code":"# S3 method for merModMultiMember plot_membership_matrix(x, varname, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.merModMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting method for multiple memberships model — plot_membership_matrix.merModMultiMember","text":"x merModMultiMember object varname multimembership variable plotted ... additional arguments pass Matrix::image","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.summary.merModMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting method for multiple memberships model summary — plot_membership_matrix.summary.merModMultiMember","title":"Plotting method for multiple memberships model summary — plot_membership_matrix.summary.merModMultiMember","text":"Plotting method multiple memberships model summary","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.summary.merModMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting method for multiple memberships model summary — plot_membership_matrix.summary.merModMultiMember","text":"","code":"# S3 method for summary.merModMultiMember plot_membership_matrix(x, varname, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/plot_membership_matrix.summary.merModMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting method for multiple memberships model summary — plot_membership_matrix.summary.merModMultiMember","text":"x merModMultiMember summary object varname multimembership variable plotted ... additional arguments pass Matrix::image","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/print.summary.lmerModLmerTestMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for multiple memberships model summary — print.summary.lmerModLmerTestMultiMember","title":"Print method for multiple memberships model summary — print.summary.lmerModLmerTestMultiMember","text":"Print method multiple memberships model summary","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/print.summary.lmerModLmerTestMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for multiple memberships model summary — print.summary.lmerModLmerTestMultiMember","text":"","code":"# S3 method for summary.lmerModLmerTestMultiMember print(x, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/print.summary.lmerModLmerTestMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for multiple memberships model summary — print.summary.lmerModLmerTestMultiMember","text":"x merModMultiMember object ... additional arguments passed print.summary.merMod","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/print.summary.merModMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for multiple memberships model summary — print.summary.merModMultiMember","title":"Print method for multiple memberships model summary — print.summary.merModMultiMember","text":"Print method multiple memberships model summary","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/print.summary.merModMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for multiple memberships model summary — print.summary.merModMultiMember","text":"","code":"# S3 method for summary.merModMultiMember print(x, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/print.summary.merModMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for multiple memberships model summary — print.summary.merModMultiMember","text":"x merModMultiMember object ... additional arguments passed print.summary.merMod","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. lme4 fixef, ranef","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.lmerModLmerTestMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for multimembership model objects — summary.lmerModLmerTestMultiMember","title":"Summary method for multimembership model objects — summary.lmerModLmerTestMultiMember","text":"Summary method multimembership model objects","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.lmerModLmerTestMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for multimembership model objects — summary.lmerModLmerTestMultiMember","text":"","code":"# S3 method for lmerModLmerTestMultiMember summary(object, ..., ddf = \"lme4\")"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.lmerModLmerTestMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for multimembership model objects — summary.lmerModLmerTestMultiMember","text":"object merModMultiMember model object ... additional arguments passed summary.merMod ddf method computing degrees freedom, used lmerTest","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.lmerModLmerTestMultiMember.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for multimembership model objects — summary.lmerModLmerTestMultiMember","text":"summary merModMultiMember object","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.merModMultiMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for multimembership model objects — summary.merModMultiMember","title":"Summary method for multimembership model objects — summary.merModMultiMember","text":"Summary method multimembership model objects","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.merModMultiMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for multimembership model objects — summary.merModMultiMember","text":"","code":"# S3 method for merModMultiMember summary(object, ...)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.merModMultiMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for multimembership model objects — summary.merModMultiMember","text":"object merModMultiMember model object ... additional arguments passed summary.merMod","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/summary.merModMultiMember.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for multimembership model objects — summary.merModMultiMember","text":"summary merModMultiMember object","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight matrix from columns containing memberships — weights_from_columns","title":"Weight matrix from columns containing memberships — weights_from_columns","text":"Provides helper function generating weight matrices","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight matrix from columns containing memberships — weights_from_columns","text":"","code":"weights_from_columns(membership_columns)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight matrix from columns containing memberships — weights_from_columns","text":"membership_columns columns containing group memberships","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight matrix from columns containing memberships — weights_from_columns","text":"sparse weight/indicator matrix type Matrix::dgCmatrix","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight matrix from columns containing memberships — weights_from_columns","text":"","code":"a <- cbind(   c(\"k\", \"k\", \"l\", NA, \"m\"),   c(\"l\", \"m\", \"k\", \"m\", \"k\"),   c(\"m\", NA, \"m\", NA, NA) ) Wa <- weights_from_columns(a)"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight matrix from vector of memberships — weights_from_vector","title":"Weight matrix from vector of memberships — weights_from_vector","text":"Provides helper function generating weight matrices","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight matrix from vector of memberships — weights_from_vector","text":"","code":"weights_from_vector(membership_vector, sep = \",\")"},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight matrix from vector of memberships — weights_from_vector","text":"membership_vector vector strings containing group memberships sep separator delimits group memberships membership_vector","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight matrix from vector of memberships — weights_from_vector","text":"sparse weight/indicator matrix type Matrix::dgCmatrix","code":""},{"path":"https://jvparidon.github.io/lmerMultiMember/reference/weights_from_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight matrix from vector of memberships — weights_from_vector","text":"","code":"a <- c(\"k,l,m\", \"k,m\", \"k\", \"l\", \"l,k\") Wa <- weights_from_vector(a)"}]
